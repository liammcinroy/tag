// GeometricMacros.scala
//
// This file contains the macros that allow Geometa to materialize types for formulas and extend them as
// observational classes or not.
//
// Note that much of this code was generated by genmetamacro_gen.py and genmetamacro_gen2.py

package org.plstudio.geometa.macros

import scala.language.experimental.macros
import scala.reflect.macros.whitebox.Context

import org.plstudio.geometa.logic._

// Mark: - Implicit definitions
//
class GeometricBundle(val c: Context) {

  def and2[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and3[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and4[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and5[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and6[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and7[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and8[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and9[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and10[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and11[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and12[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and13[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and14[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and15[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and16[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and17[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag,
    F17 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16],
    formula17: c.Expr[F17]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]
    val ttF17 = weakTypeOf[F17]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs &&
        ttF17 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and18[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag,
    F17 <: GTFormula[T] : c.WeakTypeTag,
    F18 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16],
    formula17: c.Expr[F17],
    formula18: c.Expr[F18]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]
    val ttF17 = weakTypeOf[F17]
    val ttF18 = weakTypeOf[F18]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs &&
        ttF17 <:< ttObs &&
        ttF18 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and19[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag,
    F17 <: GTFormula[T] : c.WeakTypeTag,
    F18 <: GTFormula[T] : c.WeakTypeTag,
    F19 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16],
    formula17: c.Expr[F17],
    formula18: c.Expr[F18],
    formula19: c.Expr[F19]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]
    val ttF17 = weakTypeOf[F17]
    val ttF18 = weakTypeOf[F18]
    val ttF19 = weakTypeOf[F19]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs &&
        ttF17 <:< ttObs &&
        ttF18 <:< ttObs &&
        ttF19 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and20[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag,
    F17 <: GTFormula[T] : c.WeakTypeTag,
    F18 <: GTFormula[T] : c.WeakTypeTag,
    F19 <: GTFormula[T] : c.WeakTypeTag,
    F20 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16],
    formula17: c.Expr[F17],
    formula18: c.Expr[F18],
    formula19: c.Expr[F19],
    formula20: c.Expr[F20]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]
    val ttF17 = weakTypeOf[F17]
    val ttF18 = weakTypeOf[F18]
    val ttF19 = weakTypeOf[F19]
    val ttF20 = weakTypeOf[F20]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs &&
        ttF17 <:< ttObs &&
        ttF18 <:< ttObs &&
        ttF19 <:< ttObs &&
        ttF20 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and21[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag,
    F17 <: GTFormula[T] : c.WeakTypeTag,
    F18 <: GTFormula[T] : c.WeakTypeTag,
    F19 <: GTFormula[T] : c.WeakTypeTag,
    F20 <: GTFormula[T] : c.WeakTypeTag,
    F21 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16],
    formula17: c.Expr[F17],
    formula18: c.Expr[F18],
    formula19: c.Expr[F19],
    formula20: c.Expr[F20],
    formula21: c.Expr[F21]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]
    val ttF17 = weakTypeOf[F17]
    val ttF18 = weakTypeOf[F18]
    val ttF19 = weakTypeOf[F19]
    val ttF20 = weakTypeOf[F20]
    val ttF21 = weakTypeOf[F21]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs &&
        ttF17 <:< ttObs &&
        ttF18 <:< ttObs &&
        ttF19 <:< ttObs &&
        ttF20 <:< ttObs &&
        ttF21 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def and22[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag,
    F17 <: GTFormula[T] : c.WeakTypeTag,
    F18 <: GTFormula[T] : c.WeakTypeTag,
    F19 <: GTFormula[T] : c.WeakTypeTag,
    F20 <: GTFormula[T] : c.WeakTypeTag,
    F21 <: GTFormula[T] : c.WeakTypeTag,
    F22 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16],
    formula17: c.Expr[F17],
    formula18: c.Expr[F18],
    formula19: c.Expr[F19],
    formula20: c.Expr[F20],
    formula21: c.Expr[F21],
    formula22: c.Expr[F22]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]
    val ttF17 = weakTypeOf[F17]
    val ttF18 = weakTypeOf[F18]
    val ttF19 = weakTypeOf[F19]
    val ttF20 = weakTypeOf[F20]
    val ttF21 = weakTypeOf[F21]
    val ttF22 = weakTypeOf[F22]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs &&
        ttF17 <:< ttObs &&
        ttF18 <:< ttObs &&
        ttF19 <:< ttObs &&
        ttF20 <:< ttObs &&
        ttF21 <:< ttObs &&
        ttF22 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or2[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or3[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or4[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or5[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or6[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or7[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or8[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or9[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or10[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or11[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or12[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or13[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or14[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or15[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or16[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or17[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag,
    F17 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16],
    formula17: c.Expr[F17]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]
    val ttF17 = weakTypeOf[F17]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs &&
        ttF17 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or18[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag,
    F17 <: GTFormula[T] : c.WeakTypeTag,
    F18 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16],
    formula17: c.Expr[F17],
    formula18: c.Expr[F18]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]
    val ttF17 = weakTypeOf[F17]
    val ttF18 = weakTypeOf[F18]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs &&
        ttF17 <:< ttObs &&
        ttF18 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or19[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag,
    F17 <: GTFormula[T] : c.WeakTypeTag,
    F18 <: GTFormula[T] : c.WeakTypeTag,
    F19 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16],
    formula17: c.Expr[F17],
    formula18: c.Expr[F18],
    formula19: c.Expr[F19]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]
    val ttF17 = weakTypeOf[F17]
    val ttF18 = weakTypeOf[F18]
    val ttF19 = weakTypeOf[F19]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs &&
        ttF17 <:< ttObs &&
        ttF18 <:< ttObs &&
        ttF19 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or20[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag,
    F17 <: GTFormula[T] : c.WeakTypeTag,
    F18 <: GTFormula[T] : c.WeakTypeTag,
    F19 <: GTFormula[T] : c.WeakTypeTag,
    F20 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16],
    formula17: c.Expr[F17],
    formula18: c.Expr[F18],
    formula19: c.Expr[F19],
    formula20: c.Expr[F20]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]
    val ttF17 = weakTypeOf[F17]
    val ttF18 = weakTypeOf[F18]
    val ttF19 = weakTypeOf[F19]
    val ttF20 = weakTypeOf[F20]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs &&
        ttF17 <:< ttObs &&
        ttF18 <:< ttObs &&
        ttF19 <:< ttObs &&
        ttF20 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or21[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag,
    F17 <: GTFormula[T] : c.WeakTypeTag,
    F18 <: GTFormula[T] : c.WeakTypeTag,
    F19 <: GTFormula[T] : c.WeakTypeTag,
    F20 <: GTFormula[T] : c.WeakTypeTag,
    F21 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16],
    formula17: c.Expr[F17],
    formula18: c.Expr[F18],
    formula19: c.Expr[F19],
    formula20: c.Expr[F20],
    formula21: c.Expr[F21]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]
    val ttF17 = weakTypeOf[F17]
    val ttF18 = weakTypeOf[F18]
    val ttF19 = weakTypeOf[F19]
    val ttF20 = weakTypeOf[F20]
    val ttF21 = weakTypeOf[F21]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs &&
        ttF17 <:< ttObs &&
        ttF18 <:< ttObs &&
        ttF19 <:< ttObs &&
        ttF20 <:< ttObs &&
        ttF21 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

  def or22[
    T <: GeomTheory : c.WeakTypeTag,
    F1 <: GTFormula[T] : c.WeakTypeTag,
    F2 <: GTFormula[T] : c.WeakTypeTag,
    F3 <: GTFormula[T] : c.WeakTypeTag,
    F4 <: GTFormula[T] : c.WeakTypeTag,
    F5 <: GTFormula[T] : c.WeakTypeTag,
    F6 <: GTFormula[T] : c.WeakTypeTag,
    F7 <: GTFormula[T] : c.WeakTypeTag,
    F8 <: GTFormula[T] : c.WeakTypeTag,
    F9 <: GTFormula[T] : c.WeakTypeTag,
    F10 <: GTFormula[T] : c.WeakTypeTag,
    F11 <: GTFormula[T] : c.WeakTypeTag,
    F12 <: GTFormula[T] : c.WeakTypeTag,
    F13 <: GTFormula[T] : c.WeakTypeTag,
    F14 <: GTFormula[T] : c.WeakTypeTag,
    F15 <: GTFormula[T] : c.WeakTypeTag,
    F16 <: GTFormula[T] : c.WeakTypeTag,
    F17 <: GTFormula[T] : c.WeakTypeTag,
    F18 <: GTFormula[T] : c.WeakTypeTag,
    F19 <: GTFormula[T] : c.WeakTypeTag,
    F20 <: GTFormula[T] : c.WeakTypeTag,
    F21 <: GTFormula[T] : c.WeakTypeTag,
    F22 <: GTFormula[T] : c.WeakTypeTag
  ](
    theory: c.Expr[T],
    formula1: c.Expr[F1],
    formula2: c.Expr[F2],
    formula3: c.Expr[F3],
    formula4: c.Expr[F4],
    formula5: c.Expr[F5],
    formula6: c.Expr[F6],
    formula7: c.Expr[F7],
    formula8: c.Expr[F8],
    formula9: c.Expr[F9],
    formula10: c.Expr[F10],
    formula11: c.Expr[F11],
    formula12: c.Expr[F12],
    formula13: c.Expr[F13],
    formula14: c.Expr[F14],
    formula15: c.Expr[F15],
    formula16: c.Expr[F16],
    formula17: c.Expr[F17],
    formula18: c.Expr[F18],
    formula19: c.Expr[F19],
    formula20: c.Expr[F20],
    formula21: c.Expr[F21],
    formula22: c.Expr[F22]
  ): c.Expr[GTFormula[T]] = {
    import c.universe._
    val ttObs = weakTypeOf[GTObservationalClass[T]]

    val ttF1 = weakTypeOf[F1]
    val ttF2 = weakTypeOf[F2]
    val ttF3 = weakTypeOf[F3]
    val ttF4 = weakTypeOf[F4]
    val ttF5 = weakTypeOf[F5]
    val ttF6 = weakTypeOf[F6]
    val ttF7 = weakTypeOf[F7]
    val ttF8 = weakTypeOf[F8]
    val ttF9 = weakTypeOf[F9]
    val ttF10 = weakTypeOf[F10]
    val ttF11 = weakTypeOf[F11]
    val ttF12 = weakTypeOf[F12]
    val ttF13 = weakTypeOf[F13]
    val ttF14 = weakTypeOf[F14]
    val ttF15 = weakTypeOf[F15]
    val ttF16 = weakTypeOf[F16]
    val ttF17 = weakTypeOf[F17]
    val ttF18 = weakTypeOf[F18]
    val ttF19 = weakTypeOf[F19]
    val ttF20 = weakTypeOf[F20]
    val ttF21 = weakTypeOf[F21]
    val ttF22 = weakTypeOf[F22]

    val ext =
      if (
        ttF1 <:< ttObs &&
        ttF2 <:< ttObs &&
        ttF3 <:< ttObs &&
        ttF4 <:< ttObs &&
        ttF5 <:< ttObs &&
        ttF6 <:< ttObs &&
        ttF7 <:< ttObs &&
        ttF8 <:< ttObs &&
        ttF9 <:< ttObs &&
        ttF10 <:< ttObs &&
        ttF11 <:< ttObs &&
        ttF12 <:< ttObs &&
        ttF13 <:< ttObs &&
        ttF14 <:< ttObs &&
        ttF15 <:< ttObs &&
        ttF16 <:< ttObs &&
        ttF17 <:< ttObs &&
        ttF18 <:< ttObs &&
        ttF19 <:< ttObs &&
        ttF20 <:< ttObs &&
        ttF21 <:< ttObs &&
        ttF22 <:< ttObs
      )
        ttObs
      else
        weakTypeOf[GTFormula[T]]

    val anon = newTypeName(c.fresh())
    c.Expr(
      q"""
       {
         class $anon extends $ext {}
         new $anon()
       }
       """
    )
  }

}

// Mark: - Macro object
//

object GeometricMacros {

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2
  ): GTFormula[T] = macro GeometricBundle.and2[
      T,
      F1,
      F2
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3
  ): GTFormula[T] = macro GeometricBundle.and3[
      T,
      F1,
      F2,
      F3
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4
  ): GTFormula[T] = macro GeometricBundle.and4[
      T,
      F1,
      F2,
      F3,
      F4
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5
  ): GTFormula[T] = macro GeometricBundle.and5[
      T,
      F1,
      F2,
      F3,
      F4,
      F5
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6
  ): GTFormula[T] = macro GeometricBundle.and6[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7
  ): GTFormula[T] = macro GeometricBundle.and7[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8
  ): GTFormula[T] = macro GeometricBundle.and8[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9
  ): GTFormula[T] = macro GeometricBundle.and9[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10
  ): GTFormula[T] = macro GeometricBundle.and10[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11
  ): GTFormula[T] = macro GeometricBundle.and11[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12
  ): GTFormula[T] = macro GeometricBundle.and12[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13
  ): GTFormula[T] = macro GeometricBundle.and13[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14
  ): GTFormula[T] = macro GeometricBundle.and14[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15
  ): GTFormula[T] = macro GeometricBundle.and15[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16
  ): GTFormula[T] = macro GeometricBundle.and16[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T],
    F17 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16,
    formula17: F17
  ): GTFormula[T] = macro GeometricBundle.and17[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T],
    F17 <: GTFormula[T],
    F18 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16,
    formula17: F17,
    formula18: F18
  ): GTFormula[T] = macro GeometricBundle.and18[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17,
      F18
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T],
    F17 <: GTFormula[T],
    F18 <: GTFormula[T],
    F19 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16,
    formula17: F17,
    formula18: F18,
    formula19: F19
  ): GTFormula[T] = macro GeometricBundle.and19[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17,
      F18,
      F19
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T],
    F17 <: GTFormula[T],
    F18 <: GTFormula[T],
    F19 <: GTFormula[T],
    F20 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16,
    formula17: F17,
    formula18: F18,
    formula19: F19,
    formula20: F20
  ): GTFormula[T] = macro GeometricBundle.and20[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17,
      F18,
      F19,
      F20
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T],
    F17 <: GTFormula[T],
    F18 <: GTFormula[T],
    F19 <: GTFormula[T],
    F20 <: GTFormula[T],
    F21 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16,
    formula17: F17,
    formula18: F18,
    formula19: F19,
    formula20: F20,
    formula21: F21
  ): GTFormula[T] = macro GeometricBundle.and21[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17,
      F18,
      F19,
      F20,
      F21
    ]

  implicit def and[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T],
    F17 <: GTFormula[T],
    F18 <: GTFormula[T],
    F19 <: GTFormula[T],
    F20 <: GTFormula[T],
    F21 <: GTFormula[T],
    F22 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16,
    formula17: F17,
    formula18: F18,
    formula19: F19,
    formula20: F20,
    formula21: F21,
    formula22: F22
  ): GTFormula[T] = macro GeometricBundle.and22[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17,
      F18,
      F19,
      F20,
      F21,
      F22
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2
  ): GTFormula[T] = macro GeometricBundle.or2[
      T,
      F1,
      F2
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3
  ): GTFormula[T] = macro GeometricBundle.or3[
      T,
      F1,
      F2,
      F3
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4
  ): GTFormula[T] = macro GeometricBundle.or4[
      T,
      F1,
      F2,
      F3,
      F4
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5
  ): GTFormula[T] = macro GeometricBundle.or5[
      T,
      F1,
      F2,
      F3,
      F4,
      F5
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6
  ): GTFormula[T] = macro GeometricBundle.or6[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7
  ): GTFormula[T] = macro GeometricBundle.or7[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8
  ): GTFormula[T] = macro GeometricBundle.or8[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9
  ): GTFormula[T] = macro GeometricBundle.or9[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10
  ): GTFormula[T] = macro GeometricBundle.or10[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11
  ): GTFormula[T] = macro GeometricBundle.or11[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12
  ): GTFormula[T] = macro GeometricBundle.or12[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13
  ): GTFormula[T] = macro GeometricBundle.or13[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14
  ): GTFormula[T] = macro GeometricBundle.or14[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15
  ): GTFormula[T] = macro GeometricBundle.or15[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16
  ): GTFormula[T] = macro GeometricBundle.or16[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T],
    F17 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16,
    formula17: F17
  ): GTFormula[T] = macro GeometricBundle.or17[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T],
    F17 <: GTFormula[T],
    F18 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16,
    formula17: F17,
    formula18: F18
  ): GTFormula[T] = macro GeometricBundle.or18[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17,
      F18
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T],
    F17 <: GTFormula[T],
    F18 <: GTFormula[T],
    F19 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16,
    formula17: F17,
    formula18: F18,
    formula19: F19
  ): GTFormula[T] = macro GeometricBundle.or19[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17,
      F18,
      F19
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T],
    F17 <: GTFormula[T],
    F18 <: GTFormula[T],
    F19 <: GTFormula[T],
    F20 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16,
    formula17: F17,
    formula18: F18,
    formula19: F19,
    formula20: F20
  ): GTFormula[T] = macro GeometricBundle.or20[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17,
      F18,
      F19,
      F20
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T],
    F17 <: GTFormula[T],
    F18 <: GTFormula[T],
    F19 <: GTFormula[T],
    F20 <: GTFormula[T],
    F21 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16,
    formula17: F17,
    formula18: F18,
    formula19: F19,
    formula20: F20,
    formula21: F21
  ): GTFormula[T] = macro GeometricBundle.or21[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17,
      F18,
      F19,
      F20,
      F21
    ]

  implicit def or[
    T <: GeomTheory,
    F1 <: GTFormula[T],
    F2 <: GTFormula[T],
    F3 <: GTFormula[T],
    F4 <: GTFormula[T],
    F5 <: GTFormula[T],
    F6 <: GTFormula[T],
    F7 <: GTFormula[T],
    F8 <: GTFormula[T],
    F9 <: GTFormula[T],
    F10 <: GTFormula[T],
    F11 <: GTFormula[T],
    F12 <: GTFormula[T],
    F13 <: GTFormula[T],
    F14 <: GTFormula[T],
    F15 <: GTFormula[T],
    F16 <: GTFormula[T],
    F17 <: GTFormula[T],
    F18 <: GTFormula[T],
    F19 <: GTFormula[T],
    F20 <: GTFormula[T],
    F21 <: GTFormula[T],
    F22 <: GTFormula[T]
  ](
    theory: T,
    formula1: F1,
    formula2: F2,
    formula3: F3,
    formula4: F4,
    formula5: F5,
    formula6: F6,
    formula7: F7,
    formula8: F8,
    formula9: F9,
    formula10: F10,
    formula11: F11,
    formula12: F12,
    formula13: F13,
    formula14: F14,
    formula15: F15,
    formula16: F16,
    formula17: F17,
    formula18: F18,
    formula19: F19,
    formula20: F20,
    formula21: F21,
    formula22: F22
  ): GTFormula[T] = macro GeometricBundle.or22[
      T,
      F1,
      F2,
      F3,
      F4,
      F5,
      F6,
      F7,
      F8,
      F9,
      F10,
      F11,
      F12,
      F13,
      F14,
      F15,
      F16,
      F17,
      F18,
      F19,
      F20,
      F21,
      F22
    ]

}

